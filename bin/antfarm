#! /usr/bin/ruby

# Copyright (2008) Sandia Corporation.
# Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
# the U.S. Government retains certain rights in this software.
#
# Original Author: Bryan T. Richardson, Sandia National Laboratories <btricha@sandia.gov>
#
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or (at
# your option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 

require File.dirname(__FILE__) + "/../config/boot"

require 'find'
require 'ostruct'
require 'scparse'
require 'dbmanage'
require 'cpscript'
require 'yaml'

if (defined? USER_DIR) && File.exists?("#{USER_DIR}/config/defaults.yml")
  defaults = YAML::load(IO.read("#{USER_DIR}/config/defaults.yml"))
end
defaults ||= Hash.new

@opts = OpenStruct.new
@opts.environment = defaults['environment'] || 'antfarm'
@opts.log_level = defaults['log_level'] || 'warn'

app = SCParse::ScriptCommandParser.new('antfarm')
app.options = OptionParser.new do |opts|
  opts.on('-e ENV', "Antfarm environment to use") do |env|
    @opts.environment = env
  end
  opts.on('-l LEVEL', [:debug, :info, :warn, :error, :fatal], "Antfarm log level to use (debug, info, warn, error, fatal)") do |level|
    # Level comes in as a Symbol -- must convert it to a String
    # since ENV array doesn't seem to like symbols
    @opts.log_level = level.to_s
  end
end
app.set_prerequisites_block do |cmd|
  bootstrap
end

app.add_command(SCParse::HelpCommand.new)
app.add_command(Antfarm::DBManager.new)
app.add_command(Antfarm::CPScript.new)

rails = SCParse::Script.new('rails', 'script/server')
rails.set_execution_block do |cmd,args|
  ARGV.clear
  ARGV << "webrick"
  ARGV << "-e"
  ARGV << @opts.environment
  ARGV.concat(args)
  load cmd.path
end
app.add_command(rails)

console = SCParse::Script.new('console', 'console.rb', false)
console.set_execution_block do |cmd,args|
  ARGV.clear
  ARGV << @opts.environment
  load cmd.path
end
app.add_command(console)

# TODO: Take into account situation where a directory
# in the user's script directory might have the same
# name as a directory in the application's script
# directory.  What if actual scripts have the same name... ??
#
# Scripts can be categorized using directories.  If directories
# exist in the scripts directory, turn them into a command.
sub_commands = Hash.new
Find.find(ANTFARM_ROOT + "/lib/scripts/") do |path|
  if File.directory?(path)
    base_name = File.basename(path)
    unless base_name == 'scripts'
      command = SCParse::Command.new(base_name)
      app.add_command(command)
      sub_commands[base_name] = command
    end
  elsif File.file?(path) && path =~ /rb$/
    dir = File.basename(File.dirname(path))
    name = File.basename(path, ".*")
    script = SCParse::Script.new(name, path)
    script.set_execution_block do |cmd,args|
      ARGV.clear
      ARGV.concat(args)
      load cmd.path
    end
    if dir == 'scripts'
      app.add_command(script)
    else
      sub_commands[dir].add_command(script)
    end
  end
end

sub_commands.clear
if defined? USER_DIR
  Find.find("#{USER_DIR}/scripts") do |path|
    if File.directory?(path)
      base_name = File.basename(path)
      unless base_name == 'scripts'
        # Checks to see if the 'custom' command already
        # exists, and if not, creates one.
        # Not doing this up front so a custom command
        # will only be created if custom scripts exist.
        if (custom = app.has_command?('custom')) == nil
          custom = SCParse::Command.new('custom')
          app.add_command(custom)
        end
        command = SCParse::Command.new(base_name)
        custom.add_command(command)
        sub_commands[base_name] = command
      end
    elsif File.file?(path) && path =~ /rb$/
      dir = File.basename(File.dirname(path))
      name = File.basename(path, ".*")
      script = SCParse::Script.new(name, path)
      script.set_execution_block do |cmd,args|
        ARGV.clear
        ARGV.concat(args)
        load cmd.path
      end
      if dir == 'scripts'
        # Checks to see if the 'custom' command already
        # exists, and if not, creates one. Not doing this
        # up front so a custom command will only be created
        # if custom scripts exist.
        if (custom = app.has_command?('custom')) == nil
          custom = SCParse::Command.new('custom')
          app.add_command(custom)
          sub_commands['custom'] = custom
        end
        custom.add_command(script)
      else
        sub_commands[dir].add_command(script)
      end
    end
  end
end

def bootstrap
  ENV['ANTFARM_ENV'] = @opts.environment
  ENV['ANTFARM_LOG_LEVEL'] = @opts.log_level
  require "#{ANTFARM_ROOT}/config/environment"
end

app.parse!
