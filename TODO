AS OF 06/01/2010

 - USE BLUEMONK'S IPAddress LIBRARY
   - I already forked it and added in loopback and private methods for IPv4
 - Get available plugins sorted alphabetically
 - Read in defaults from user configs - DONE by scrapcoder, 5/13/09
 - Convert all the plugins for gosh sakes!
 - Implement DataMapper tagging - DONE by scrapcoder, 5/11/09
   - Need to redo this using new models (see models in orig/ for details)
 - Test DataMapper validations - DONE by scrapcoder, 5/13/09
   - DONE again by scrapcoder, 05/20/2010 (spec tests)
 - Fix address functions in ip_interface and ip_network models - DONE by scrapcoder, 5/11/09
   - Now removed, scrapcoder, 05/20/2010
 - Modify framework class to avoid loading all plugins if not necessary
 - Decide on tagging contexts for individual model (each model currently only has a generic 'tags' context)
 - Add attribute accessors for each tag context in models
 - See if a parent model class can be created to roll up the following:
   - storage_names[:default] = <model name>
   - property :id, Serial
   - has_tags_on :tags
   - attribute accessor for generic 'tags' context
 - Create gemspec (don't forget about all the dm-* gem requirements!!!)
 - Make sure ANTFARM and user-specified plugins don't clash
   - First try - when loading a plugin, check to see if it's already defined.  If so, raise an error (be specific with the error!).
 - Convert underscores in plugin names to hyphens for command line usage
 - Figure out why :constraint => :destroy isn't working (needed for Layer3Network#merge) - DONE by scrapcoder, 5/28/09
 - Create initializer for each class that strips out junk to be used for creating classes each class belongs to.
   - What about a centalized DataStore? Models can check it to see if anything is set that they care about. Could make it thread safe with Mutex stuff if need be.
   - Nah, DataMapper support the passing of a hash that describes model attributes... even nested ones. 05/20/2010
 - Utilize new Bundler gem environment solution being used by Heroku and others
   - In use as of 05/20/2010 - scrapcoder
 - Ditzify! This helps to support CHANGELOGs and such.
   - Is it possible to update GitHub Issues with Ditz information? Would be cool...

lib/antfarm.rb:
  * [ 50] [TODO] If a netmask is given, should we somehow check
  * [ 70] [TODO] Error
  * [103] [TODO] track down the IPv6 private use ranges and include them
  * [110] [TODO] track down IPv6 localnet mask (guessing /10 for now)

lib/antfarm/database_manager.rb:
  * [ 40] [TODO] <scrapcoder>: all these 'puts' statements need to be logged rather than printed, just in case
  * [ 49] [TODO] <scrapcoder>: can this stuff be done using the postgres gem instead?
  * [ 66] [TODO] better error catching - not EVERY error is PostreSQL...

lib/antfarm/framework.rb:
  * [ 11] [TODO] <scrapcoder>: make it possible to only load a single plugin.
  * [ 64] [TODO] <scrapcoder>: make it possible to load single plugin.
  * [ 67] [TODO] <scrapcoder>: check for error raised when a plugin already exists.

lib/antfarm/cli/framework.rb:
  * [ 22] [TODO] <scrapcoder> - throw error if @plugin is nil
  * [ 27] [TODO] <scrapcoder> - throw error if @plugin is nil

lib/antfarm/helpers.rb:
  * [ 33] [TODO] 

lib/antfarm/models/ip_interface.rb:
  * [ 63] [TODO] what should we do about multiple private networks?

lib/antfarm/models/ip_network.rb:
  * [ 76] [TODO] Create private network objects.

lib/antfarm/models/layer_three_network.rb:
  * [ 46] [TODO] update network's certainty factor using sub_network's certainty factor.
  * [ 67] [TODO] figure out how to use alias with class methods

lib/antfarm/models/layer_two_interface.rb:
  * [ 25] [TODO] be sure to write test if used!

lib/antfarm/plugin.rb:
  * [ 16] [TODO] <scrapcoder>: add 'custom/' to the front of
  * [ 49] [TODO] <scrapcoder>: is there a better way to do this?!
  * [ 72] [TODO] <scrapcoder>: check to see if module is already defined.

lib/initializer.rb:
  * [ 25] [TODO] Hmmm... should we vendor Bundler?! <scrapcoder>
